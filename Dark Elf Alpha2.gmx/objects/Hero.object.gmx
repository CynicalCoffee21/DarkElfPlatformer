<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>herowalkright</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>onGround</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>yVelocity</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Saves various object instances in arrays so that collision can be properly managed

for(i=0;i&lt;instance_number(cave_wall);i++){
cave_walls[i] = instance_find(cave_wall, i);
}
for(i=0;i&lt;instance_number(spike);i++){
cave_spikes[i] = instance_find(spike, i);
}
for(i=0;i&lt;instance_number(spike);i++){
cave_vertspikes[i] = instance_find(vertspikes, i);
}
for(i=0;i&lt;instance_number(cavecieling);i++){
cave_cielings[i] = instance_find(cavecieling, i);
}

for(i=0;i&lt;instance_number(cave_floor);i++){
cave_floors[i] = instance_find(cave_floor, i);
}
facingleft = false;
facingright = false;
xVelocity = 0;
hurting = false;
previousX = 0;
previousY = 0;
onCieling = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Health</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>3</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invulnerable</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>climbing</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canJump</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>colliding</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hurting</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canJump</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invulnerable</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravityG = .6;
if(onGround = 0 &amp;&amp; !climbing){

yVelocity -= gravityG;


}

for(i=0;i&lt;array_length_1d(cave_walls);i++){
if(place_meeting(x+xVelocity*1,y, cave_walls[i])){
if(onGround = 0){
x+=xVelocity;
yVelocity = 0;
xVelocity = 0;

}
}
}

y-=yVelocity;

if(invulnerable){
x-=xVelocity;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MOVELEFT = keyboard_check(ord('A'));
MOVERIGHT = keyboard_check(ord('D'));
MOVEDOWN = keyboard_check(ord('S'));
MOVEUP = keyboard_check(ord('W'));
level3 = keyboard_check(ord('3'));
JUMP = keyboard_check(vk_space);
playerSpeed = 7;



//Moves the player left and right. Detects collision with any objects.

if(level3){
room_goto(3);
Hero.x = 20;
Hero.y = 50;
}
if(MOVELEFT &amp;&amp; x &gt; sprite_width/2 &amp;&amp; !hurting) { 

xVelocity = -3;

for(i=0;i&lt;instance_number(cave_wall);i++){

    
    if(!place_meeting(x-5, y, cave_wall) &amp;&amp; !climbing){
    x -= playerSpeed/instance_number(cave_wall); 
    
    }else if(!place_meeting(x-5, y, cave_wall) &amp;&amp; climbing){
    facingleft = true;
    }
    else{
        
        
        for(k=0;k&lt;array_length_1d(cave_walls);k++){
            if(place_meeting(x-5, y, cave_walls[k])){
                if(y+sprite_height-5 &lt;= cave_walls[k].y){
                    
                        x -= playerSpeed/instance_number(cave_wall);
                                                    }
                                                }
                                            }
                                         }
                                       }
    
                                    }
 
 if(MOVERIGHT &amp;&amp; x &lt; room_width - sprite_width/2 &amp;&amp; !hurting){ 
    xVelocity = 3;
        if(!place_meeting(x+5,y,cave_wall) &amp;&amp; !climbing){
            climbing = false;
            x += playerSpeed; 
        }else if(!place_meeting(x+5,y,cave_wall) &amp;&amp; climbing)
        {
        facingright = true;
        }
        else {
            for(k=0;k&lt;array_length_1d(cave_walls);k++){
            
                if(place_meeting(x+5, y, cave_walls[k])){
                    if( y+sprite_height-5 &lt;= cave_walls[k].y){
                         x += playerSpeed;
    }
    }
    }
    }
}

//Lets player move down while climbing
if(MOVEDOWN &amp;&amp; climbing){
if(!(place_meeting(x+10,y+sprite_height/2,cave_wall) || (place_meeting(x-10,y+sprite_height/2,cave_wall)))){
climbing = false;
}
y += playerSpeed;
}

//Lets player climb while holding down W and A or D while near a wall.
if(MOVERIGHT &amp;&amp; MOVEUP &amp;&amp; place_meeting(x+7, y+10, cave_wall)){
    climbing = true;
    y -= playerSpeed;
    yVelocity = 0;

        
        }
        
if(MOVELEFT &amp;&amp; MOVEUP &amp;&amp; place_meeting(x-7, y+10, cave_wall)){
    climbing = true;
    y -= playerSpeed;
    yVelocity = 0;
    
        
        }

        //Detects collision for spikes
for(i=0;i&lt;instance_number(spike);i++){
    if(place_meeting(x, y, cave_spikes[i]) &amp;&amp; !invulnerable){
    Health--;
    invulnerable = true;
    alarm[0] = 60;
    hurting = true;
    climbing = false;
    onGround = false;
    alarm[3] = 30;
    show_debug_message(Health);
    xVelcoity = -xVelocity;
    yVelocity = 7;
    }
}

//Detects collision for verticle spikes

for(i=0;i&lt;instance_number(vertspikes);i++){
    if(place_meeting(x, y, cave_vertspikes[i]) &amp;&amp; !invulnerable){
    Health--;
    invulnerable = true;
    alarm[0] = 60;
    hurting = true;
    climbing = false;
    onGround = false;
    alarm[3] = 30;
    show_debug_message("FUCK");
    xVelocity = xVelocity;
    yVelocity = 5;
    
    }
}

//Detects if the player on the floor

for(i=0;i&lt;instance_number(cave_floor);i++){
    if(place_meeting(x,y+5,cave_floors[i]) &amp;&amp; y &lt; cave_floors[i].y){
        
            yVelocity = 0;
            y=cave_floors[i].y-sprite_height-1;
            onGround = 1;
                        
                        }
    else if(place_meeting(x,y-3,cave_floors[i]) &amp;&amp; y &gt; cave_floors[i].bbox_bottom-10){
        
        yVelocity = 0;
        y=cave_floors[i].bbox_bottom+4;
        
        
                                
}
}
//Collision for walls 
for(i=0;i&lt;array_length_1d(cave_walls);i++){
if((place_meeting(x-5,y+1, cave_walls[i]) &amp;&amp; place_meeting(x+5,y+1,cave_walls[i]) &amp;&amp; y &lt; cave_walls[i].bbox_top)){
if(onGround = 0){
yVelocity = 0;

y=cave_walls[i].bbox_top-sprite_height-1;
onGround = 1;
show_debug_message("derp")
}
}else if(place_meeting(x-xVelocity,y+3-yVelocity, cave_walls[i]) &amp;&amp; y &gt; cave_walls[i].bbox_bottom-5){
yVelocity = 0;
y=cave_walls[i].bbox_bottom+10;

}

}

//Controls jumping

if(JUMP &amp;&amp; (onGround = 1 || climbing) &amp;&amp; canJump &amp;&amp; !hurting){


yVelocity += 12;
onGround = 0;
canJump = false;
climbing = false;
alarm[1] = 30;

}

if(!place_meeting(x,y+1, all)){
onGround = 0;
}

if(onGround = 0 &amp;&amp; !hurting){

xVelocity = 0;
}

if(Health = 0){
room_goto(4);
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
